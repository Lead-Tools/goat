
// Copyright 2019 Tsukanov Alexander. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

#Область РеализацияКонвейера

Процедура Вызвать(ОбработчикЗадания, ОбщиеПараметры, ИмяВызывающейПроцедуры) Экспорт
	
	КонтекстЗадания = Новый Структура;
	КонтекстЗадания.Вставить("ИмяВызывающейПроцедуры", ИмяВызывающейПроцедуры);
	КонтекстЗадания.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	КонтекстЗадания.Вставить("СледующийОбработчикЗадания", Неопределено); // заполняется при вызове _ВыполнитьОбработчикЗадания()
	
	ВыполнитьОбработкуОповещения(ОбработчикЗадания, КонтекстЗадания);
	
КонецПроцедуры

Функция ПостроитьКонвейернуюЛинию(Задания, ОбработчикОшибок, ОбработчикЗаданияДляВозврата) Экспорт
	
	ИндексЗадания = Задания.Количество();
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СледующийОбработчикЗадания", ОбработчикЗаданияДляВозврата);
	
	_ВыполнитьОператорВозврат = Новый ОписаниеОповещения(
		"_ВыполнитьОператорВозврат",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	ОбработчикЗадания = ОбработчикЗадания(_ВыполнитьОператорВозврат, Неопределено, ОбработчикОшибок);
	
	СтекОбработчиковКонецЕсли = Новый Массив;
	СтекОбработчиковЕслиЛожь = Новый Массив;
	СтекОбработчиковКонецПопытки = Новый Массив;
	СтекТочекВходаПослеИсключения = Новый Массив;
	
	// для одноразовой подмены обработчика следующего по порядку заданий
	// нужно для установки переходов на КонецЕсли после веток например
	СледующийОбработчикЗадания = Неопределено;
	
	Пока ИндексЗадания > 0 Цикл
		
		ИндексЗадания = ИндексЗадания - 1;
		Задание = Задания[ИндексЗадания];
		ПараметрыЗадания = Задание.ДополнительныеПараметры;
		
		Если СтекТочекВходаПослеИсключения.Количество() > 0 Тогда // взять с вершины стека
			ПараметрыЗадания.ОбработчикЗаданияОператорИсключение = СтекТочекВходаПослеИсключения[СтекТочекВходаПослеИсключения.ВГраница()]; 
		КонецЕсли; 
		
		Если СледующийОбработчикЗадания = Неопределено Тогда
			ОбработчикЗадания = ОбработчикЗадания(Задание, ОбработчикЗадания, ОбработчикОшибок);
		Иначе
			ОбработчикЗадания = ОбработчикЗадания(Задание, СледующийОбработчикЗадания, ОбработчикОшибок);
			СледующийОбработчикЗадания = Неопределено;
		КонецЕсли; 
		
		Если Задание.Модуль = ЭтотОбъект Тогда
			
			// TODO: проверять синтаксис
			
			ИмяПроцедурыЗадания = Задание.ИмяПроцедуры;
			
			Если ИмяПроцедурыЗадания = "_ВыполнитьОператорКонецЕсли" Тогда
							
				СтекОбработчиковКонецЕсли.Добавить(ОбработчикЗадания);
				СтекОбработчиковЕслиЛожь.Добавить(ОбработчикЗадания);
								
			ИначеЕсли ИмяПроцедурыЗадания = "_ВыполнитьОператорИначе" Тогда
				
				ОбработчикЗаданияОператорКонецЕсли = СнятьПоследнееЗначение(СтекОбработчиковЕслиЛожь);
				
				Инвариант(ОбработчикЗаданияОператорКонецЕсли.ДополнительныеПараметры.Задание.ИмяПроцедуры = "_ВыполнитьОператорКонецЕсли");
				
				СтекОбработчиковЕслиЛожь.Добавить(ОбработчикЗадания);
				
				// Заданию перед оператором "Иначе" нужно установить следующий обработчик = "КонецЕсли"
				СледующийОбработчикЗадания = СтекОбработчиковКонецЕсли[СтекОбработчиковКонецЕсли.ВГраница()];
				
			ИначеЕсли ИмяПроцедурыЗадания = "_ВыполнитьОператорИначеЕсли" Тогда
								
				ПараметрыЗадания.ОбработчикЗаданияЕслиЛожь = СнятьПоследнееЗначение(СтекОбработчиковЕслиЛожь);	
				
				ИмяПроцедурыЗаданияЕслиЛожь = ПараметрыЗадания.ОбработчикЗаданияЕслиЛожь.ДополнительныеПараметры.Задание.ИмяПроцедуры;
				
				Инвариант(Ложь
					Или ИмяПроцедурыЗаданияЕслиЛожь = "_ВыполнитьОператорКонецЕсли"
					Или ИмяПроцедурыЗаданияЕслиЛожь = "_ВыполнитьОператорИначе"
					Или ИмяПроцедурыЗаданияЕслиЛожь = "_ВыполнитьОператорИначеЕсли"
				);
				
				СтекОбработчиковЕслиЛожь.Добавить(ОбработчикЗадания);
				
				// Заданию перед оператором "ИначеЕсли" нужно установить следующий обработчик = "КонецЕсли" 		
				СледующийОбработчикЗадания = СтекОбработчиковКонецЕсли[СтекОбработчиковКонецЕсли.ВГраница()];
				
			ИначеЕсли ИмяПроцедурыЗадания = "_ВыполнитьОператорЕсли" Тогда
								
				ПараметрыЗадания.ОбработчикЗаданияЕслиЛожь = СнятьПоследнееЗначение(СтекОбработчиковЕслиЛожь);
				СнятьПоследнееЗначение(СтекОбработчиковКонецЕсли);
				
			ИначеЕсли ИмяПроцедурыЗадания = "_ВыполнитьОператорКонецПопытки" Тогда
				
				СтекОбработчиковКонецПопытки.Добавить(ОбработчикЗадания);
				
			ИначеЕсли ИмяПроцедурыЗадания = "_ВыполнитьОператорИсключение" Тогда
				
				ОбработчикЗаданияОператорКонецПопытки = СнятьПоследнееЗначение(СтекОбработчиковКонецПопытки);
				
				СтекТочекВходаПослеИсключения.Добавить(ОбработчикЗадания.ДополнительныеПараметры.СледующийОбработчикЗадания);
				ОбработчикЗадания.ДополнительныеПараметры.СледующийОбработчикЗадания = ОбработчикЗаданияОператорКонецПопытки;
								
			ИначеЕсли ИмяПроцедурыЗадания = "_ВыполнитьОператорПопытка" Тогда
				
				СнятьПоследнееЗначение(СтекТочекВходаПослеИсключения);
				
			КонецЕсли; 
			
		КонецЕсли; 
				
	КонецЦикла; 
	
	Инвариант(СтекОбработчиковКонецЕсли.Количество() = 0);
	Инвариант(СтекОбработчиковЕслиЛожь.Количество() = 0);
	Инвариант(СтекОбработчиковКонецПопытки.Количество() = 0);
	Инвариант(СтекТочекВходаПослеИсключения.Количество() = 0);
	Инвариант(СледующийОбработчикЗадания = Неопределено);
	
	Возврат ОбработчикЗадания;
	
КонецФункции

Процедура _ВыполнитьОбработчикЗадания(КонтекстЗадания, ПараметрыОбработчикаЗадания) Экспорт
	
	Попытка
		
		Инвариант(КонтекстЗадания.ИмяВызывающейПроцедуры <> Неопределено); 
		
		//Сообщить(СтрШаблон("Вызывающий(%1) -> Задание(%2)", КонтекстЗадания.ИмяВызывающейПроцедуры, ПараметрыОбработчикаЗадания.Задание.ИмяПроцедуры));
		
		КонтекстЗадания.СледующийОбработчикЗадания = ПараметрыОбработчикаЗадания.СледующийОбработчикЗадания;
		
		ФиксированныйКонтекстЗадания = Новый ФиксированнаяСтруктура(КонтекстЗадания);
		ВыполнитьОбработкуОповещения(ПараметрыОбработчикаЗадания.Задание, ФиксированныйКонтекстЗадания);
		
	Исключение
		
		СтандартнаяОбработка = Истина;
		
		Если ПараметрыОбработчикаЗадания.ОбработчикОшибок <> Неопределено Тогда 
			КонтекстОшибки = КонтекстОшибки(ИнформацияОбОшибке(), КонтекстЗадания.ОбщиеПараметры);
			ВыполнитьОбработкуОповещения(ПараметрыОбработчикаЗадания.ОбработчикОшибок, КонтекстОшибки);	
			СтандартнаяОбработка = КонтекстОшибки.СтандартнаяОбработка; 				
		КонецЕсли; 
		
		Если СтандартнаяОбработка = Истина Тогда // безопасная проверка
			ПараметрыЗадания = ПараметрыОбработчикаЗадания.Задание.ДополнительныеПараметры;
			Если ПараметрыЗадания.ОбработчикЗаданияОператорИсключение = Неопределено Тогда
				ВызватьИсключение;
			Иначе
				Вызвать(ПараметрыЗадания.ОбработчикЗаданияОператорИсключение, КонтекстЗадания.ОбщиеПараметры, "ПрикладноеИсключение!");
			КонецЕсли; 
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура _ОбработатьОшибку(ИнформацияОбОшибке, СтандартнаяОбработка, ПараметрыДекоратора) Экспорт
	
	Если ПараметрыДекоратора.ОбработчикОшибок <> Неопределено Тогда
		
		КонтекстОшибки = КонтекстОшибки(ИнформацияОбОшибке, ПараметрыДекоратора.ОбщиеПараметры);
		ВыполнитьОбработкуОповещения(ПараметрыДекоратора.ОбработчикОшибок, КонтекстОшибки);	
		СтандартнаяОбработка = КонтекстОшибки.СтандартнаяОбработка;
	
	КонецЕсли; 
	
	Если СтандартнаяОбработка = Истина Тогда // безопасная проверка
		Если ПараметрыДекоратора.ОбработчикЗаданияОператорИсключение <> Неопределено Тогда
			Вызвать(ПараметрыДекоратора.ОбработчикЗаданияОператорИсключение, ПараметрыДекоратора.ОбщиеПараметры, "СистемноеИсключение!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработчикЗадания(Задание, СледующийОбработчикЗадания, ОбработчикОшибок)
	
	ПараметрыОбработчикаЗадания = Новый Структура;
	ПараметрыОбработчикаЗадания.Вставить("Задание", Задание);
	ПараметрыОбработчикаЗадания.Вставить("СледующийОбработчикЗадания", СледующийОбработчикЗадания);
	ПараметрыОбработчикаЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьОбработчикЗадания = Новый ОписаниеОповещения(
		"_ВыполнитьОбработчикЗадания",
		ЭтотОбъект,
		ПараметрыОбработчикаЗадания
	);
	
	Возврат _ВыполнитьОбработчикЗадания;
	
КонецФункции

Функция КонтекстОшибки(ИнформацияОбОшибке, ОбщиеПараметры)
	
	КонтекстОшибки = Новый Структура;
	КонтекстОшибки.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	КонтекстОшибки.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	КонтекстОшибки.Вставить("СтандартнаяОбработка", Истина);
	
	Возврат КонтекстОшибки;
	
КонецФункции

#КонецОбласти // РеализацияКонвейера

#Область РеализацияЗаданий

Процедура _ВыполнитьПроизвольноеЗадание(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыДекоратора(КонтекстЗадания, ПараметрыЗадания);
	
	ВыполнитьОбработкуОповещения(ПараметрыЗадания.ДекорированныйОбработчик, КонтекстЗадания);
		
КонецПроцедуры 

Процедура _ВыполнитьОператорЕсли(КонтекстЗадания, ПараметрыЗадания) Экспорт
		
	РезультатУсловия = Ложь;
	
	ВыполнитьОбработкуОповещения(ПараметрыЗадания.Обработчик, РезультатУсловия);
	
	Если РезультатУсловия <> Истина Тогда // безопасная проверка
		
		Вызвать(
			ПараметрыЗадания.ОбработчикЗаданияЕслиЛожь,
			КонтекстЗадания.ОбщиеПараметры,
			ИмяМодуля() + "._ВыполнитьОператорЕсли()"
		);
		
	Иначе	
		
		Вызвать(
			КонтекстЗадания.СледующийОбработчикЗадания,
			КонтекстЗадания.ОбщиеПараметры,
			ИмяМодуля() + "._ВыполнитьОператорЕсли()"
		); 
		
	КонецЕсли;
		
КонецПроцедуры

Процедура _ВыполнитьОператорИначеЕсли(КонтекстЗадания, ПараметрыЗадания) Экспорт
		
	РезультатУсловия = Ложь;
	
	ВыполнитьОбработкуОповещения(ПараметрыЗадания.Обработчик, РезультатУсловия);
	
	Если РезультатУсловия <> Истина Тогда // безопасная проверка
		
		Вызвать(
			ПараметрыЗадания.ОбработчикЗаданияЕслиЛожь,
			КонтекстЗадания.ОбщиеПараметры,
			ИмяМодуля() + "._ВыполнитьОператорИначеЕсли()"
		);
		
	Иначе	
		
		Вызвать(
			КонтекстЗадания.СледующийОбработчикЗадания,
			КонтекстЗадания.ОбщиеПараметры,
			ИмяМодуля() + "._ВыполнитьОператорИначеЕсли()"
		); 
		
	КонецЕсли;
		
КонецПроцедуры

Процедура _ВыполнитьОператорИначе(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Инвариант(КонтекстЗадания.СледующийОбработчикЗадания <> Неопределено); 
	
	Вызвать(
		КонтекстЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		ИмяМодуля() + "._ВыполнитьОператорИначе()"
	);	
	
КонецПроцедуры

Процедура _ВыполнитьОператорКонецЕсли(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Инвариант(КонтекстЗадания.СледующийОбработчикЗадания <> Неопределено); 
	
	Вызвать(
		КонтекстЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		ИмяМодуля() + "._ВыполнитьОператорКонецЕсли()"
	);	
	
КонецПроцедуры

Процедура _ВыполнитьОператорПопытка(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Инвариант(КонтекстЗадания.СледующийОбработчикЗадания <> Неопределено); 
	
	Вызвать(
		КонтекстЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		ИмяМодуля() + "._ВыполнитьОператорПопытка()"
	);	
	
КонецПроцедуры

Процедура _ВыполнитьОператорИсключение(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Инвариант(КонтекстЗадания.СледующийОбработчикЗадания <> Неопределено); 
	
	Вызвать(
		КонтекстЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		ИмяМодуля() + "._ВыполнитьОператорИсключение()"
	);	
	
КонецПроцедуры

Процедура _ВыполнитьОператорКонецПопытки(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Инвариант(КонтекстЗадания.СледующийОбработчикЗадания <> Неопределено); 
	
	Вызвать(
		КонтекстЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		ИмяМодуля() + "._ВыполнитьОператорКонецПопытки()"
	);	
	
КонецПроцедуры

Процедура _ВыполнитьЗаданиеДиалогВыбораФайла(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыДекоратора(КонтекстЗадания, ПараметрыЗадания);
	
	_ПоказатьДиалогВыбораФайла = Новый ОписаниеОповещения(
		"_ПоказатьДиалогВыбораФайла",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	//НачатьПослеПодключенияРасширенияРаботыСФайлами(_ПоказатьДиалогВыбораФайла);
	
	ВыполнитьОбработкуОповещения(_ПоказатьДиалогВыбораФайла, Неопределено);
	
КонецПроцедуры

Процедура _ВыполнитьЗаданиеСозданиеКаталога(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыДекоратора(КонтекстЗадания, ПараметрыЗадания);
		
	_НачатьСозданиеКаталога = Новый ОписаниеОповещения(
		"_НачатьСозданиеКаталога",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	//НачатьПослеПодключенияРасширенияРаботыСФайлами(_НачатьСозданиеКаталога);
	
	ВыполнитьОбработкуОповещения(_НачатьСозданиеКаталога, Неопределено);
	
КонецПроцедуры 

Процедура _ВыполнитьЗаданиеУдалениеФайлов(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыДекоратора(КонтекстЗадания, ПараметрыЗадания);
		
	_НачатьУдалениеФайлов = Новый ОписаниеОповещения(
		"_НачатьУдалениеФайлов",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	//НачатьПослеПодключенияРасширенияРаботыСФайлами(_НачатьУдалениеФайлов);
	
	ВыполнитьОбработкуОповещения(_НачатьУдалениеФайлов, Неопределено);
	
КонецПроцедуры

Процедура _ВыполнитьЗаданиеДиалогВопроса(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыДекоратора(КонтекстЗадания, ПараметрыЗадания);
		
	_ПоказатьВопрос = Новый ОписаниеОповещения(
		"_ПоказатьВопрос",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	ВыполнитьОбработкуОповещения(_ПоказатьВопрос, Неопределено);
	
КонецПроцедуры

Процедура _ВыполнитьОператорВозврат(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Вызвать(
		ПараметрыЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		ИмяМодуля() + "._ВыполнитьОператорВозврат()"
	);
	
КонецПроцедуры

#КонецОбласти // РеализацияЗаданий

#Область Заглушка

// Заглушка, которая используется в стандартных этапах в качестве обработчика если последний не указан.

Функция ОписаниеОбработчикаЗаглушки() Экспорт
	
	Возврат Новый ОписаниеОповещения("_ОбработчикЗаглушка", ЭтотОбъект);
	
КонецФункции

Процедура _ОбработчикЗаглушка(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти // Заглушка

#Область Обертки

// Простые обертки методов платформы, чтобы иметь возможность вызывать их через ВыполнитьОбработкуОповещения()

Процедура _ПоказатьДиалогВыбораФайла(Ничего, ПараметрыМетода) Экспорт
		
	ДиалогВыбораФайла = ПараметрыМетода.ДиалогВыбораФайла;
	ДиалогВыбораФайла.Показать(ПараметрыМетода.ДекорированныйОбработчик);	
	
КонецПроцедуры

Процедура _НачатьУдалениеФайлов(Ничего, ПараметрыМетода) Экспорт
		
	НачатьУдалениеФайлов(
		ПараметрыМетода.ДекорированныйОбработчик,
		ИзвлечьЗначение(ПараметрыМетода.Путь),
		ИзвлечьЗначение(ПараметрыМетода.Маска)
	);	
	
КонецПроцедуры

Процедура _НачатьСозданиеКаталога(Ничего, ПараметрыМетода) Экспорт
		
	НачатьСозданиеКаталога(
		ПараметрыМетода.ДекорированныйОбработчик,
		ИзвлечьЗначение(ПараметрыМетода.ИмяКаталога)
	);	
	
КонецПроцедуры

Процедура _ПоказатьВопрос(Ничего, ПараметрыМетода) Экспорт
	
	ПоказатьВопрос(
		ПараметрыМетода.ДекорированныйОбработчик,
		ИзвлечьЗначение(ПараметрыМетода.ТекстВопроса),
		ИзвлечьЗначение(ПараметрыМетода.Кнопки), 
		ИзвлечьЗначение(ПараметрыМетода.Таймаут), 
		ИзвлечьЗначение(ПараметрыМетода.КнопкаПоУмолчанию), 
		ИзвлечьЗначение(ПараметрыМетода.Заголовок), 
		ИзвлечьЗначение(ПараметрыМетода.КнопкаТаймаута)
	);	
	
КонецПроцедуры

#КонецОбласти // Обертки

#Область ДекораторыОбработчиков

// Декораторы, которые расширяют логику пользовательских обработчиков.
// Например, добавляют в конце передачу управления на следующий этап конвейера.

Функция ДекорироватьОбработчик(Знач Обработчик, ИмяДекоратора = "_ВыполнитьОбработчик2") Экспорт
	
	Если Обработчик = Неопределено Тогда
		Обработчик = ОписаниеОбработчикаЗаглушки();	
	КонецЕсли;
	
	ПараметрыДекоратора = Новый Структура;
	ПараметрыДекоратора.Вставить("Обработчик", Обработчик);
	ПараметрыДекоратора.Вставить("СледующийОбработчикЗадания", Неопределено);
	ПараметрыДекоратора.Вставить("ОбщиеПараметры", Неопределено);
	ПараметрыДекоратора.Вставить("ОбработчикОшибок", Неопределено);
	ПараметрыДекоратора.Вставить("ОбработчикЗаданияОператорИсключение", Неопределено);
	
	ДекорированныйОбработчик = Новый ОписаниеОповещения(
		ИмяДекоратора,
		ЭтотОбъект,
		ПараметрыДекоратора,
		"_ОбработатьОшибку",
		ЭтотОбъект
	);
	
	Возврат ДекорированныйОбработчик;
	
КонецФункции  

Процедура _ВыполнитьОбработчик1(ПараметрыДекоратора) Экспорт
	
	ВыполнитьОбработкуОповещения(ПараметрыДекоратора.Обработчик);
	
	Вызвать(
		ПараметрыДекоратора.СледующийОбработчикЗадания,
		ПараметрыДекоратора.ОбщиеПараметры,
		СтрШаблон("%1._ВыполнитьОбработчик1[%2]()", ИмяМодуля(), ПараметрыДекоратора.Обработчик.ИмяПроцедуры)
	);
	
КонецПроцедуры

Процедура _ВыполнитьОбработчик2(Результат, ПараметрыДекоратора) Экспорт
	
	ВыполнитьОбработкуОповещения(ПараметрыДекоратора.Обработчик, Результат);
	
	Вызвать(
		ПараметрыДекоратора.СледующийОбработчикЗадания,
		ПараметрыДекоратора.ОбщиеПараметры,
		СтрШаблон("%1._ВыполнитьОбработчик2[%2]()", ИмяМодуля(), ПараметрыДекоратора.Обработчик.ИмяПроцедуры)
	);
	
КонецПроцедуры

#КонецОбласти // ДекораторыОбработчиков

#Область СлужебныеМетоды

Процедура ПодготовитьПараметрыДекоратора(КонтекстЗадания, ПараметрыЗадания)
	
	ПараметрыДекоратора = ПараметрыЗадания.ДекорированныйОбработчик.ДополнительныеПараметры;
	
	Инвариант(ПараметрыДекоратора <> Неопределено);	
	
	// Для передачи управления на следующее задание в декораторах нужна дополнительная информация.
	// В заданиях такой проблемы нет, так как им передается контекст, содержащий эту информацию.
	// Например в _ВыполнитьЗаданиеДиалогВыбораФайла() будет подготовлена информация для передачи в _ВыполнитьОбработчик2(). 
	ПараметрыДекоратора.СледующийОбработчикЗадания = КонтекстЗадания.СледующийОбработчикЗадания;
	ПараметрыДекоратора.ОбщиеПараметры = КонтекстЗадания.ОбщиеПараметры;
	
	// При обработке системной ошибки нужно иметь возможность вызвать указанный для задания произвольный обработчик ошибок.
	// см. ОбработатьОшибку()
	ПараметрыДекоратора.ОбработчикОшибок = ПараметрыЗадания.ОбработчикОшибок;
	ПараметрыДекоратора.ОбработчикЗаданияОператорИсключение = ПараметрыЗадания.ОбработчикЗаданияОператорИсключение;
	
КонецПроцедуры

Процедура Инвариант(Условие, ТекстИсключения = Неопределено)
	
	Если Не Условие Тогда
		Если ТекстИсключения = Неопределено Тогда
			ТекстИсключения = НСтр(
				"ru = 'нарушение протокола';
				|en = 'violation of protocol'"
			);
		КонецЕсли; 
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры 	

Функция ИмяМодуля()
	
	Возврат "КонвейерЗаданийСлужебныйКлиент";
	
КонецФункции

Функция СнятьПоследнееЗначение(Стек)
	
	ИндексВершиныСтека = Стек.ВГраница();
	Значение = Стек[ИндексВершиныСтека];
	Стек.Удалить(ИндексВершиныСтека);
	
	Возврат Значение;
	
КонецФункции 

Функция ИзвлечьЗначение(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура")
		И Значение.Свойство("__Коллекция")
		И Значение.Свойство("__Ключ") Тогда
		Возврат Значение.__Коллекция[Значение.__Ключ]
	Иначе
		Возврат Значение;
	КонецЕсли; 
	
КонецФункции 

Функция Ссылка(Коллекция, Ключ) Экспорт
	
	Возврат Новый ФиксированнаяСтруктура("__Коллекция, __Ключ", Коллекция, Ключ);
	
КонецФункции 

#КонецОбласти // СлужебныеМетоды
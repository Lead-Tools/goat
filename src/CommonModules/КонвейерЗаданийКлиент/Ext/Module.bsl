
// Copyright 2019 Tsukanov Alexander. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.


// TODO: проверять что входящие обработчики расположены в этом модуле

Функция СоздатьЛинию() Экспорт
	
	Линия = Новый Структура;
	Линия.Вставить("Задания", Новый Массив);
	Линия.Вставить("ОбработчикПервогоЗадания", Неопределено);
	
	Возврат Линия;
	
КонецФункции 

Процедура Пуск(Линия, ОбработчикОшибок, СледующийОбработчикЗадания, ОбщиеПараметры, ИмяВызывающейПроцедуры) Экспорт
	
	Линия.ОбработчикПервогоЗадания = ПостроитьКонвейернуюЛинию(Линия.Задания, ОбработчикОшибок, СледующийОбработчикЗадания);
	
	Вызвать(Линия.ОбработчикПервогоЗадания, ОбщиеПараметры, ИмяВызывающейПроцедуры);
	
КонецПроцедуры

Процедура Вызвать(ОбработчикЗадания, ОбщиеПараметры, ИмяВызывающейПроцедуры) Экспорт
	
	КонтекстЗадания = Новый Структура;
	КонтекстЗадания.Вставить("ИмяВызывающейПроцедуры", ИмяВызывающейПроцедуры);
	КонтекстЗадания.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	КонтекстЗадания.Вставить("СледующийОбработчикЗадания", Неопределено); // заполняется при вызове _ВыполнитьОбработчикЗадания()
	
	ВыполнитьОбработкуОповещения(ОбработчикЗадания, КонтекстЗадания);
	
КонецПроцедуры

Процедура _ВыполнитьОбработчикЗадания(КонтекстЗадания, ПараметрыОбработчикаЗадания) Экспорт
	
	Попытка
		
		Инвариант(КонтекстЗадания.ИмяВызывающейПроцедуры <> Неопределено); 
		
		Сообщить(СтрШаблон("Вызывающий(%1) -> Задание(%2)", КонтекстЗадания.ИмяВызывающейПроцедуры, ПараметрыОбработчикаЗадания.Задание.ИмяПроцедуры));
		
		КонтекстЗадания.СледующийОбработчикЗадания = ПараметрыОбработчикаЗадания.СледующийОбработчикЗадания;
		
		ФиксированныйКонтекстЗадания = Новый ФиксированнаяСтруктура(КонтекстЗадания);
		ВыполнитьОбработкуОповещения(ПараметрыОбработчикаЗадания.Задание, ФиксированныйКонтекстЗадания);
		
	Исключение
		
		Если ПараметрыОбработчикаЗадания.ОбработчикОшибок <> Неопределено Тогда 
		
			КонтекстОшибки = КонтекстОшибки(ИнформацияОбОшибке(), КонтекстЗадания.ОбщиеПараметры);
			ВыполнитьОбработкуОповещения(ПараметрыОбработчикаЗадания.ОбработчикОшибок, КонтекстОшибки);
			
		КонецЕсли; 
		
	КонецПопытки;
	
КонецПроцедуры

Процедура _ОбработатьОшибку(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры._ОбработчикОшибок <> Неопределено Тогда
		
		КонтекстОшибки = КонтекстОшибки(ИнформацияОбОшибке, ДополнительныеПараметры._ОбщиеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры._ОбработчикОшибок, КонтекстОшибки);
			
		СтандартнаяОбработка = Ложь;
	
	КонецЕсли; 
	
КонецПроцедуры 

Функция КонтекстОшибки(ИнформацияОбОшибке, ОбщиеПараметры)
	
	КонтекстОшибки = Новый Структура;
	КонтекстОшибки.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	КонтекстОшибки.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	
	Возврат КонтекстОшибки;
	
КонецФункции

Функция ОбработчикЗадания(Задание, СледующийОбработчикЗадания, ОбработчикОшибок)
	
	ПараметрыОбработчикаЗадания = Новый Структура;
	ПараметрыОбработчикаЗадания.Вставить("Задание", Задание);
	ПараметрыОбработчикаЗадания.Вставить("СледующийОбработчикЗадания", СледующийОбработчикЗадания);
	ПараметрыОбработчикаЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьОбработчикЗадания = Новый ОписаниеОповещения(
		"_ВыполнитьОбработчикЗадания",
		ЭтотОбъект,
		ПараметрыОбработчикаЗадания
	);
	
	Возврат _ВыполнитьОбработчикЗадания;
	
КонецФункции 

// Создает новый обработчик ошибок
Функция ОбработчикОшибок(ИмяПроцедуры, Модуль) Экспорт
	
	Возврат Новый ОписаниеОповещения(ИмяПроцедуры, Модуль, Новый Структура);
	
КонецФункции 

Функция ПостроитьКонвейернуюЛинию(Задания, ОбработчикОшибок, СледующийОбработчикЗадания)
	
	//ОбработчикиЗаданий = Новый Массив(Задания.Количество() + 1); // + ОстановитьКонвейер
	
	ИндексЗадания = Задания.Количество();
	
	_ВыполнитьЗаданиеОстановитьКонвейер = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеОстановитьКонвейер",
		ЭтотОбъект,
		СледующийОбработчикЗадания
	);
	
	ОбработчикЗадания = ОбработчикЗадания(_ВыполнитьЗаданиеОстановитьКонвейер, Неопределено, ОбработчикОшибок);
	//ОбработчикиЗаданий[ИндексЗадания] = ОбработчикЗадания;
	
	СтекОкончанийУсловныхБлоков = Новый Массив;
	
	Пока ИндексЗадания > 0 Цикл
		
		ИндексЗадания = ИндексЗадания - 1;
		Задание = Задания[ИндексЗадания];
		ПараметрыЗадания = Задание.ДополнительныеПараметры;
		
		ОбработчикЗадания = ОбработчикЗадания(Задание, ОбработчикЗадания, ОбработчикОшибок);
		
		Если Задание.Модуль = ЭтотОбъект Тогда
			
			Если Задание.ИмяПроцедуры = "_ВыполнитьЗаданиеОкончаниеУсловногоБлока" Тогда
			
				// Добавить в стек
				
				СтекОкончанийУсловныхБлоков.Добавить(ОбработчикЗадания);
				
			ИначеЕсли Задание.ИмяПроцедуры = "_ВыполнитьЗаданиеНачалоУсловногоБлока" Тогда
				
				// Снять со стека и воткнуть в параметр
				
				ПараметрыЗадания.СледующийОбработчикЗадания = СнятьПоследнееЗначение(СтекОкончанийУсловныхБлоков);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		//ОбработчикОшибокЗадания = Неопределено;
		//Если ПараметрыЗадания.Свойство("ОбработчикОшибок", ОбработчикОшибокЗадания)
		//	И ОбработчикОшибокЗадания <> Неопределено Тогда
		//	ОбработчикОшибокЗадания.ДополнительныеПараметры.Вставить("ОбработчикиЗаданий", ОбработчикиЗаданий);
		//КонецЕсли;  
		
		//ОбработчикЗадания = ОбработчикЗадания(Задание, ОбработчикЗадания, ОбработчикОшибок);
		//ОбработчикиЗаданий[ИндексЗадания] = ОбработчикЗадания;
		
	КонецЦикла; 
	
	// TODO: это похоже надо выпилить, т.к. при ошибке нужно прыгать в блок Исключение (доп. механика)
	// а пользовательский обработчик ошибок не должен ничего знать
	//ОбработчикОшибок.ДополнительныеПараметры.Вставить("ОбработчикиЗаданий", ОбработчикиЗаданий);
	
	Возврат ОбработчикЗадания;
	
КонецФункции 

#Область ПроизвольныеЭлементыКонвейера

// Произвольное задание. По окончании управление сразу передается на следующий этап в конвейере.
// ИмяПроцедуры - имя процедуры, которая должна быть экспортной, на клиенте, и иметь два параметра: КонтекстЗадания, ДополнительныеПараметры
// Модуль - модуль, в котором находится процедура
// ДополнительныеПараметры - произвольный параметр, который передается этапу в ДополнительныеПараметры
Функция ПроизвольноеЗадание(ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	// TODO: Перенести в конструкторы заданий
	
	Задание = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	ПараметрыДекоратора = Новый Структура;
	ПараметрыДекоратора.Вставить("Задание", Задание);
	
	_ВыполнитьЗадание = Новый ОписаниеОповещения(
		"_ВыполнитьЗадание",
		ЭтотОбъект,
		ПараметрыДекоратора
	);	
	
	Возврат _ВыполнитьЗадание;
	
КонецФункции  

// Произвольный обработчик с одним параметром. По окончании управление сразу передается на следующий этап в конвейере.
// ИмяПроцедуры - имя процедуры, которая должна быть экспортной, на клиенте, и иметь один параметр: ДополнительныеПараметры.
// Модуль - модуль, в котором находится процедура.
// ДополнительныеПараметры - произвольный параметр, который передается обработчику в ДополнительныеПараметры.
Функция ПроизвольныйОбработчик1(ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	// TODO: сделать приватным и заворачивать в самих заданиях? Все равно любой надо заворачивать. Так надежнее будет
	
	Обработчик = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	ПараметрыДекоратора = Новый Структура;
	ПараметрыДекоратора.Вставить("Обработчик", Обработчик);
	
	_ВыполнитьОбработчик1 = Новый ОписаниеОповещения(
		"_ВыполнитьОбработчик1",
		ЭтотОбъект,
		ПараметрыДекоратора,
		"_ОбработатьОшибку",
		ЭтотОбъект
	);	
	
	Возврат _ВыполнитьОбработчик1;
	
КонецФункции

// Произвольный обработчик с двумя параметрами. По окончании управление сразу передается на следующий этап в конвейере.
// ИмяПроцедуры - имя процедуры, которая должна быть экспортной, на клиенте, и иметь два параметра: Результат, ДополнительныеПараметры.
// Модуль - модуль, в котором находится процедура.
// ДополнительныеПараметры - произвольный параметр, который передается обработчику в ДополнительныеПараметры.
Функция ПроизвольныйОбработчик2(ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	// TODO: сделать приватным и заворачивать в самих заданиях? Все равно любой надо заворачивать. Так надежнее будет 
	
	Обработчик = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	ПараметрыДекоратора = Новый Структура;
	ПараметрыДекоратора.Вставить("Обработчик", Обработчик);
	
	_ВыполнитьОбработчик2 = Новый ОписаниеОповещения(
		"_ВыполнитьОбработчик2",
		ЭтотОбъект,
		ПараметрыДекоратора,
		"_ОбработатьОшибку",
		ЭтотОбъект
	);	
	
	Возврат _ВыполнитьОбработчик2;
	
КонецФункции

#КонецОбласти // ПроизвольныеЭлементыКонвейера

#Область Этапы

Функция ЭтапНачалоУсловногоБлока(Линия, ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	Линия.Задания.Добавить(ЗаданиеНачалоУсловногоБлока(ИмяПроцедуры, Модуль, ДополнительныеПараметры));
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ЭтапОкончаниеУсловногоБлока(Линия, Обработчик = Неопределено) Экспорт
	
	Линия.Задания.Добавить(ЗаданиеОкончаниеУсловногоБлока(Обработчик));
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ЭтапПроизвольноеЗадание(Линия, ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	Линия.Задания.Добавить(ПроизвольноеЗадание(ИмяПроцедуры, Модуль, ДополнительныеПараметры));
	
	Возврат ЭтотОбъект;
	
КонецФункции 
	
Функция ЭтапЗапуститьВспомогательнуюЛинию(Линия, ВспомогательнаяЛиния, ОбработчикОшибок = Неопределено) Экспорт
	
	Линия.Задания.Добавить(ЗаданиеЗапуститьВспомогательнуюЛинию(ВспомогательнаяЛиния, ОбработчикОшибок));
	
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция ЭтапПоказатьДиалогВыбораФайла(Линия, Обработчик, ДиалогВыбораФайла, ОбработчикОшибок = Неопределено) Экспорт
	
	Линия.Задания.Добавить(ЗаданиеПоказатьДиалогВыбораФайла(Обработчик, ДиалогВыбораФайла, ОбработчикОшибок));	
	
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция ЭтапНачатьСозданиеКаталога(Линия, Обработчик, ИмяКаталога, ОбработчикОшибок = Неопределено) Экспорт
	
	Линия.Задания.Добавить(ЗаданиеНачатьСозданиеКаталога(Обработчик, ИмяКаталога, ОбработчикОшибок));
	
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция ЭтапНачатьУдалениеФайлов(Линия, Обработчик, Путь, Маска = Неопределено, ОбработчикОшибок = Неопределено) Экспорт
	
	Линия.Задания.Добавить(ЗаданиеНачатьУдалениеФайлов(Обработчик, Путь, Маска, ОбработчикОшибок));
	
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция ЭтапПоказатьВопрос(Линия, Обработчик, ТекстВопроса, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = Неопределено, КнопкаТаймаута = Неопределено) Экспорт
	
	Линия.Задания.Добавить(ЗаданиеПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, Таймаут, КнопкаПоУмолчанию, Заголовок, КнопкаТаймаута));
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти // Этапы

#Область КонструкторыСтандартныхЗаданий

Функция ЗаданиеНачалоУсловногоБлока(ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	Обработчик = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	//ПараметрыДекоратора = Новый Структура;
	//ПараметрыДекоратора.Вставить("Обработчик", Обработчик);

	//Обработчик = Новый ОписаниеОповещения(
	//	"_ВыполнитьОбработчик2",
	//	ЭтотОбъект,
	//	ПараметрыДекоратора,
	//	"_ОбработатьОшибку",
	//	ЭтотОбъект
	//);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("СледующийОбработчикЗадания", Неопределено);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", Неопределено);
	
	_ВыполнитьЗаданиеНачалоУсловногоБлока = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеНачалоУсловногоБлока",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеНачалоУсловногоБлока;
	
КонецФункции

Функция ЗаданиеОкончаниеУсловногоБлока(Обработчик = Неопределено) Экспорт
	
	// TODO: обработчик вроде нафиг не нужен
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", Неопределено);
	
	_ВыполнитьЗаданиеОкончаниеУсловногоБлока = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеОкончаниеУсловногоБлока",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеОкончаниеУсловногоБлока;
	
КонецФункции

Функция ЗаданиеЗапуститьВспомогательнуюЛинию(ВспомогательнаяЛиния, ОбработчикОшибок = Неопределено) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ВспомогательнаяЛиния", ВспомогательнаяЛиния);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьЗаданиеЗапуститьВспомогательнуюЛинию = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеЗапуститьВспомогательнуюЛинию",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеЗапуститьВспомогательнуюЛинию;
	
КонецФункции

Функция ЗаданиеПоказатьДиалогВыбораФайла(Обработчик, ДиалогВыбораФайла, ОбработчикОшибок = Неопределено) Экспорт
	
	Если Обработчик = Неопределено Тогда

		ПараметрыДекоратора = Новый Структура;
		ПараметрыДекоратора.Вставить("Обработчик", ОписаниеОбработчикаЗаглушки());

		Обработчик = Новый ОписаниеОповещения(
			"_ВыполнитьОбработчик2",
			ЭтотОбъект,
			ПараметрыДекоратора,
			"_ОбработатьОшибку",
			ЭтотОбъект
		);	
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьЗаданиеПоказатьДиалогВыбораФайла = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеПоказатьДиалогВыбораФайла",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеПоказатьДиалогВыбораФайла;
	
КонецФункции 

Функция ЗаданиеНачатьСозданиеКаталога(Обработчик, ИмяКаталога, ОбработчикОшибок = Неопределено) Экспорт
	
	Если Обработчик = Неопределено Тогда

		ПараметрыДекоратора = Новый Структура;
		ПараметрыДекоратора.Вставить("Обработчик", ОписаниеОбработчикаЗаглушки());

		Обработчик = Новый ОписаниеОповещения(
			"_ВыполнитьОбработчик2",
			ЭтотОбъект,
			ПараметрыДекоратора,
			"_ОбработатьОшибку",
			ЭтотОбъект
		);	
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("ИмяКаталога", ИмяКаталога);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьЗаданиеНачатьСозданиеКаталога = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеНачатьСозданиеКаталога",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеНачатьСозданиеКаталога;
	
КонецФункции 

Функция ЗаданиеНачатьУдалениеФайлов(Обработчик, Путь, Маска = Неопределено, ОбработчикОшибок = Неопределено) Экспорт
	
	Если Обработчик = Неопределено Тогда

		ПараметрыДекоратора = Новый Структура;
		ПараметрыДекоратора.Вставить("Обработчик", ОписаниеОбработчикаЗаглушки());

		Обработчик = Новый ОписаниеОповещения(
			"_ВыполнитьОбработчик1",
			ЭтотОбъект,
			ПараметрыДекоратора
		);	
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("Путь", Путь);
	ПараметрыЗадания.Вставить("Маска", Маска);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьЗаданиеНачатьУдалениеФайлов = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеНачатьУдалениеФайлов",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеНачатьУдалениеФайлов;
	
КонецФункции

Функция ЗаданиеПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = Неопределено, КнопкаТаймаута = Неопределено) Экспорт
	
	Если Обработчик = Неопределено Тогда

		ПараметрыДекоратора = Новый Структура;
		ПараметрыДекоратора.Вставить("Обработчик", ОписаниеОбработчикаЗаглушки());

		Обработчик = Новый ОписаниеОповещения(
			"_ВыполнитьОбработчик2",
			ЭтотОбъект,
			ПараметрыДекоратора
		);	
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("ТекстВопроса", ТекстВопроса);
	ПараметрыЗадания.Вставить("Кнопки", Кнопки);
	ПараметрыЗадания.Вставить("Таймаут", Таймаут);
	ПараметрыЗадания.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчанию);
	ПараметрыЗадания.Вставить("Заголовок", Заголовок);
	ПараметрыЗадания.Вставить("КнопкаТаймаута", КнопкаТаймаута);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", Неопределено);
	
	_ВыполнитьЗаданиеПоказатьВопрос = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеПоказатьВопрос",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеПоказатьВопрос;
	
КонецФункции

#КонецОбласти // КонструкторыСтандартныхЗаданий

#Область РеализацияСтандартныхЗаданий

Процедура _ВыполнитьЗаданиеНачалоУсловногоБлока(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания);
	
	РезультатУсловия = False;
	
	ВыполнитьОбработкуОповещения(ПараметрыЗадания.Обработчик, РезультатУсловия);
	
	Если РезультатУсловия <> Истина Тогда
		
		Вызвать(
			ПараметрыЗадания.СледующийОбработчикЗадания,
			КонтекстЗадания.ОбщиеПараметры,
			ИмяМодуля() + "._ВыполнитьЗаданиеНачалоУсловногоБлока()"
		);
		
	Иначе	
		
		Вызвать(
			КонтекстЗадания.СледующийОбработчикЗадания,
			КонтекстЗадания.ОбщиеПараметры,
			ИмяМодуля() + "._ВыполнитьЗаданиеНачалоУсловногоБлока()"
		); 
		
	КонецЕсли;
		
КонецПроцедуры

Процедура _ВыполнитьЗаданиеОкончаниеУсловногоБлока(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Инвариант(КонтекстЗадания.СледующийОбработчикЗадания <> Неопределено); 
	
	Вызвать(
		КонтекстЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		ИмяМодуля() + "._ВыполнитьЗаданиеОкончаниеУсловногоБлока()"
	);	
	
КонецПроцедуры

Процедура _ВыполнитьЗаданиеЗапуститьВспомогательнуюЛинию(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Пуск(
		ПараметрыЗадания.ВспомогательнаяЛиния,
		ПараметрыЗадания.ОбработчикОшибок,
		КонтекстЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		КонтекстЗадания.ИмяВызывающейПроцедуры
	);
	
КонецПроцедуры

Процедура _ВыполнитьЗаданиеПоказатьДиалогВыбораФайла(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания);
	
	_ПоказатьДиалогВыбораФайла = Новый ОписаниеОповещения(
		"_ПоказатьДиалогВыбораФайла",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	//НачатьПослеПодключенияРасширенияРаботыСФайлами(_ПоказатьДиалогВыбораФайла);
	
	ВыполнитьОбработкуОповещения(_ПоказатьДиалогВыбораФайла, Неопределено);
	
КонецПроцедуры

Процедура _ВыполнитьЗаданиеНачатьСозданиеКаталога(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания);
		
	_НачатьСозданиеКаталога = Новый ОписаниеОповещения(
		"_НачатьСозданиеКаталога",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	//НачатьПослеПодключенияРасширенияРаботыСФайлами(_НачатьСозданиеКаталога);
	
	ВыполнитьОбработкуОповещения(_НачатьСозданиеКаталога, Неопределено);
	
КонецПроцедуры 

Процедура _ВыполнитьЗаданиеНачатьУдалениеФайлов(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания);
		
	_НачатьУдалениеФайлов = Новый ОписаниеОповещения(
		"_НачатьУдалениеФайлов",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	//НачатьПослеПодключенияРасширенияРаботыСФайлами(_НачатьУдалениеФайлов);
	
	ВыполнитьОбработкуОповещения(_НачатьУдалениеФайлов, Неопределено);
	
КонецПроцедуры

Процедура _ВыполнитьЗаданиеПоказатьВопрос(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания);
		
	_ПоказатьВопрос = Новый ОписаниеОповещения(
		"_ПоказатьВопрос",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	ВыполнитьОбработкуОповещения(_ПоказатьВопрос, Неопределено);
	
КонецПроцедуры

Процедура _ВыполнитьЗаданиеОстановитьКонвейер(КонтекстЗадания, СледующийОбработчикЗадания) Экспорт
	
	Инвариант(КонтекстЗадания.СледующийОбработчикЗадания = Неопределено); 
	
	Вызвать(
		СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		ИмяМодуля() + "._ВыполнитьЗаданиеОстановитьКонвейер()"
	);
	
КонецПроцедуры

#КонецОбласти // РеализацияСтандартныхЗаданий

#Область Заглушка

// Заглушка, которая используется в стандартных этапах в качестве обработчика если последний не указан.

Функция ОписаниеОбработчикаЗаглушки()
	
	Возврат Новый ОписаниеОповещения("_ОбработчикЗаглушка", ЭтотОбъект);
	
КонецФункции

Процедура _ОбработчикЗаглушка(Result, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти // Заглушка

#Область Обертки

// Простые обертки методов платформы, чтобы иметь возможность вызывать их через ВыполнитьОбработкуОповещения()

Процедура _ПоказатьДиалогВыбораФайла(Ничего, ПараметрыМетода) Экспорт
		
	ДиалогВыбораФайла = ПараметрыМетода.ДиалогВыбораФайла;
	ДиалогВыбораФайла.Показать(ПараметрыМетода.Обработчик);	
	
КонецПроцедуры

Процедура _НачатьУдалениеФайлов(Ничего, ПараметрыМетода) Экспорт
		
	НачатьУдалениеФайлов(
		ПараметрыМетода.Обработчик,
		ПараметрыМетода.Путь,
		ПараметрыМетода.Маска
	);	
	
КонецПроцедуры

Процедура _НачатьСозданиеКаталога(Ничего, ПараметрыМетода) Экспорт
		
	НачатьСозданиеКаталога(
		ПараметрыМетода.Обработчик,
		ПараметрыМетода.ИмяКаталога
	);	
	
КонецПроцедуры

Процедура _ПоказатьВопрос(Ничего, ПараметрыМетода) Экспорт
	
	ПоказатьВопрос(
		ПараметрыМетода.Обработчик,
		ПараметрыМетода.ТекстВопроса,
		ПараметрыМетода.Кнопки, 
		ПараметрыМетода.Таймаут, 
		ПараметрыМетода.КнопкаПоУмолчанию, 
		ПараметрыМетода.Заголовок, 
		ПараметрыМетода.КнопкаТаймаута
	);	
	
КонецПроцедуры

#КонецОбласти // Обертки

#Область Декораторы

// Декораторы, которые расширяют логику пользовательских процедур.
// Например, добавляют в конце передачу управления на следующий этап конвейера.

Процедура _ВыполнитьЗадание(КонтекстЗадания, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Задание, КонтекстЗадания);
	
	Вызвать(
		КонтекстЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		СтрШаблон("%1._ВыполнитьЗадание[%2]()", ИмяМодуля(), ДополнительныеПараметры.Задание.ИмяПроцедуры)
	);
	
КонецПроцедуры 

Процедура _ВыполнитьОбработчик1(ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Обработчик);
	
	Вызвать(
		ДополнительныеПараметры._СледующийОбработчикЗадания,
		ДополнительныеПараметры._ОбщиеПараметры,
		СтрШаблон("%1._ВыполнитьОбработчик1[%2]()", ИмяМодуля(), ДополнительныеПараметры.Обработчик.ИмяПроцедуры)
	);
	
КонецПроцедуры

Процедура _ВыполнитьОбработчик2(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Обработчик, Результат);
	
	Вызвать(
		ДополнительныеПараметры._СледующийОбработчикЗадания,
		ДополнительныеПараметры._ОбщиеПараметры,
		СтрШаблон("%1._ВыполнитьОбработчик2[%2]()", ИмяМодуля(), ДополнительныеПараметры.Обработчик.ИмяПроцедуры)
	);
	
КонецПроцедуры

#КонецОбласти // Декораторы

#Область СлужебныеМетоды

Процедура ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания)
	
	ПараметрыОбработчика = ПараметрыЗадания.Обработчик.ДополнительныеПараметры;
	
	Инвариант(ПараметрыОбработчика <> Неопределено);	
	
	// TODO: тут видимо можно избавиться от подчеркиваний, так как декоратор всегда накрывает обработчик
	
	// Для передачи управления на следующее задание в обработчиках нужна дополнительная информация.
	// В заданиях такой проблемы нет, так как им передается контекст, содержащий эту информацию.
	// Например в _ВыполнитьЗаданиеПоказатьДиалогВыбораФайла() будет подготовлена информация для передачи в _ВыполнитьОбработчик2(). 
	ПараметрыОбработчика.Вставить("_СледующийОбработчикЗадания", КонтекстЗадания.СледующийОбработчикЗадания);
	ПараметрыОбработчика.Вставить("_ОбщиеПараметры", КонтекстЗадания.ОбщиеПараметры);
	
	// При обработке системной ошибки нужно иметь возможность вызвать указанный для задания произвольный обработчик ошибок.
	ПараметрыОбработчика.Вставить("_ОбработчикОшибок", ПараметрыЗадания.ОбработчикОшибок); // см. например ОбработатьОшибку()
	
КонецПроцедуры

Функция ИмяМодуля()
	
	Возврат "КонвейерЗаданийКлиент";
	
КонецФункции

Процедура Инвариант(Условие, ТекстИсключения = Неопределено)
	
	Если Не Условие Тогда
		Если ТекстИсключения = Неопределено Тогда
			ТекстИсключения = НСтр(
				"ru = 'нарушение протокола';
				|en = 'violation of protocol'"
			);
		КонецЕсли; 
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры 	

Функция СнятьПоследнееЗначение(Стек)
	
	ИндексВершиныСтека = Стек.ВГраница();
	Значение = Стек[ИндексВершиныСтека];
	Стек.Удалить(ИндексВершиныСтека);
	
	Возврат Значение;
	
КонецФункции 

#КонецОбласти // СлужебныеМетоды


// Copyright 2019 Tsukanov Alexander. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

Функция СоздатьЛинию() Экспорт
	
	Линия = Новый Структура;
	Линия.Вставить("Задания", Новый Массив);
	Линия.Вставить("ОбработчикПервогоЗадания", Неопределено);
	
	Возврат Линия;
	
КонецФункции 

Процедура НачатьВыполнение(Линия, ОбработчикОшибок, СледующийОбработчикЗадания, ОбщиеПараметры, ИмяВызывающейПроцедуры) Экспорт
	
	Линия.ОбработчикПервогоЗадания = КонвейерЗаданийСлужебныйКлиент.ПостроитьКонвейернуюЛинию(
		Линия.Задания,
		ОбработчикОшибок,
		СледующийОбработчикЗадания
	);
	
	КонвейерЗаданийСлужебныйКлиент.Вызвать(
		Линия.ОбработчикПервогоЗадания,
		ОбщиеПараметры,
		ИмяВызывающейПроцедуры
	);
	
КонецПроцедуры

#Область Задания

// TODO: прописать каждому заданию какие параметры могут быть ссылками

// Произвольное задание. По окончании управление сразу передается на следующий этап в конвейере.
// ИмяПроцедуры - имя процедуры, которая должна быть экспортной, на клиенте, и иметь два параметра: КонтекстЗадания, ДополнительныеПараметры
// Модуль - модуль, в котором находится процедура
// ДополнительныеПараметры - произвольный параметр, который передается этапу в ДополнительныеПараметры
Функция ПроизвольноеЗадание(Линия, ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	Обработчик = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	ДекорированныйОбработчик = КонвейерЗаданийСлужебныйКлиент.ДекорироватьОбработчик(Обработчик);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДекорированныйОбработчик", ДекорированныйОбработчик);
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьПроизвольноеЗадание = Новый ОписаниеОповещения(
		"_ВыполнитьПроизвольноеЗадание",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);	
	
	Линия.Задания.Добавить(_ВыполнитьПроизвольноеЗадание);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ДиалогВыбораФайла(Линия, Обработчик, ДиалогВыбораФайла, ОбработчикОшибок = Неопределено) Экспорт
	
	ДекорированныйОбработчик = КонвейерЗаданийСлужебныйКлиент.ДекорироватьОбработчик(Обработчик);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДекорированныйОбработчик", ДекорированныйОбработчик);
	ПараметрыЗадания.Вставить("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьЗаданиеДиалогВыбораФайла = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеДиалогВыбораФайла",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьЗаданиеДиалогВыбораФайла);
	
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция СозданиеКаталога(Линия, Обработчик, ИмяКаталога, ОбработчикОшибок = Неопределено) Экспорт
	
	ДекорированныйОбработчик = КонвейерЗаданийСлужебныйКлиент.ДекорироватьОбработчик(Обработчик);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДекорированныйОбработчик", ДекорированныйОбработчик);
	ПараметрыЗадания.Вставить("ИмяКаталога", ИмяКаталога);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьЗаданиеСозданиеКаталога = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеСозданиеКаталога",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьЗаданиеСозданиеКаталога);
	
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция УдалениеФайлов(Линия, Обработчик, Путь, Маска = Неопределено, ОбработчикОшибок = Неопределено) Экспорт
	
	ДекорированныйОбработчик = КонвейерЗаданийСлужебныйКлиент.ДекорироватьОбработчик(Обработчик, "_ВыполнитьОбработчик1");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДекорированныйОбработчик", ДекорированныйОбработчик);
	ПараметрыЗадания.Вставить("Путь", Путь);
	ПараметрыЗадания.Вставить("Маска", Маска);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьЗаданиеУдалениеФайлов = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеУдалениеФайлов",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьЗаданиеУдалениеФайлов);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ДиалогВопроса(Линия, Обработчик, ТекстВопроса, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = Неопределено, КнопкаТаймаута = Неопределено) Экспорт
	
	ДекорированныйОбработчик = КонвейерЗаданийСлужебныйКлиент.ДекорироватьОбработчик(Обработчик);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДекорированныйОбработчик", ДекорированныйОбработчик);
	ПараметрыЗадания.Вставить("ТекстВопроса", ТекстВопроса);
	ПараметрыЗадания.Вставить("Кнопки", Кнопки);
	ПараметрыЗадания.Вставить("Таймаут", Таймаут);
	ПараметрыЗадания.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчанию);
	ПараметрыЗадания.Вставить("Заголовок", Заголовок);
	ПараметрыЗадания.Вставить("КнопкаТаймаута", КнопкаТаймаута);
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьЗаданиеДиалогВопроса = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеДиалогВопроса",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьЗаданиеДиалогВопроса);
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти // Задания

#Область Операторы

Функция ОператорЕсли(Линия, ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	// без декоратора
	Обработчик = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("ОбработчикЗаданияЕслиЛожь", Неопределено);
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьОператорЕсли = Новый ОписаниеОповещения(
		"_ВыполнитьОператорЕсли",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
		
	Линия.Задания.Добавить(_ВыполнитьОператорЕсли);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ОператорИначеЕсли(Линия, ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	// без декоратора
	Обработчик = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("ОбработчикЗаданияЕслиЛожь", Неопределено);
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьОператорИначеЕсли = Новый ОписаниеОповещения(
		"_ВыполнитьОператорИначеЕсли",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
		
	Линия.Задания.Добавить(_ВыполнитьОператорИначеЕсли);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ОператорИначе(Линия) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьОператорИначе = Новый ОписаниеОповещения(
		"_ВыполнитьОператорИначе",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьОператорИначе);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ОператорКонецЕсли(Линия) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьОператорКонецЕсли = Новый ОписаниеОповещения(
		"_ВыполнитьОператорКонецЕсли",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьОператорКонецЕсли);
	
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция ОператорПопытка(Линия) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьОператорПопытка = Новый ОписаниеОповещения(
		"_ВыполнитьОператорПопытка",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьОператорПопытка);
	
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция ОператорИсключение(Линия) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьОператорИсключение = Новый ОписаниеОповещения(
		"_ВыполнитьОператорИсключение",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьОператорИсключение);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ОператорКонецПопытки(Линия) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьОператорКонецПопытки = Новый ОписаниеОповещения(
		"_ВыполнитьОператорКонецПопытки",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьОператорКонецПопытки);
	
	Возврат ЭтотОбъект;
	
КонецФункции 

Функция ОператорВозврат(Линия) Экспорт
		
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СледующийОбработчикЗадания", Неопределено);
	
	ДополнитьПараметрыЗадания(ПараметрыЗадания);
	
	_ВыполнитьОператорВозврат = Новый ОписаниеОповещения(
		"_ВыполнитьОператорВозврат",
		КонвейерЗаданийСлужебныйКлиент,
		ПараметрыЗадания
	);
	
	Линия.Задания.Добавить(_ВыполнитьОператорВозврат);
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти // Операторы

#Область СинонимыОператоров

Функция Оператор_Если(Линия, ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ОператорЕсли(Линия, ИмяПроцедуры, Модуль, ДополнительныеПараметры);
	
КонецФункции

Функция Оператор_ИначеЕсли(Линия, ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ОператорИначеЕсли(Линия, ИмяПроцедуры, Модуль, ДополнительныеПараметры);
	
КонецФункции

Функция Оператор_Иначе(Линия) Экспорт
	
	Возврат ОператорИначе(Линия);
	
КонецФункции 

Функция Оператор_КонецЕсли(Линия) Экспорт
	
	Возврат ОператорКонецЕсли(Линия);
	
КонецФункции

Функция Оператор_Попытка(Линия) Экспорт
	
	Возврат ОператорПопытка(Линия);
	
КонецФункции 

Функция Оператор_Исключение(Линия) Экспорт
		
	Возврат ОператорИсключение(Линия);
	
КонецФункции

Функция Оператор_КонецПопытки(Линия) Экспорт
	
	Возврат ОператорКонецПопытки(Линия);
	
КонецФункции 

Функция Оператор_Возврат(Линия) Экспорт
	
	Возврат ОператорВозврат(Линия);
	
КонецФункции

#КонецОбласти // СинонимыОператоров

#Область СлужебныеМетоды

// Создает новый обработчик ошибок
Функция ОбработчикОшибок(ИмяПроцедуры, Модуль) Экспорт
	
	// TODO: может лучше декорировать?
	
	Возврат Новый ОписаниеОповещения(ИмяПроцедуры, Модуль, Новый Структура);
	
КонецФункции

Функция ИзвлечьЗначение(Значение) Экспорт
	
	Возврат КонвейерЗаданийСлужебныйКлиент.ИзвлечьЗначение(Значение); 
	
КонецФункции 

Функция Ссылка(Коллекция, Ключ) Экспорт
	
	Возврат КонвейерЗаданийСлужебныйКлиент.Ссылка(Коллекция, Ключ);
	
КонецФункции 

Функция ДополнитьПараметрыЗадания(ПараметрыЗадания)
	
	ДобавитьСвойствоЕслиОтсутствует(ПараметрыЗадания, "ОбработчикОшибок");
	ДобавитьСвойствоЕслиОтсутствует(ПараметрыЗадания, "ОбработчикЗаданияОператорИсключение");
	
КонецФункции 

Процедура ДобавитьСвойствоЕслиОтсутствует(Структура, ИмяСвойства)
	
	Если Не Структура.Свойство(ИмяСвойства) Тогда
		Структура.Вставить(ИмяСвойства);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти // СлужебныеМетоды

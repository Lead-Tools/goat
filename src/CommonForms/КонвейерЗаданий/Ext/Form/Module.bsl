
&НаКлиенте
Процедура Пуск(Задания, ОбработчикОшибок, СледующийОбработчикЗадания, ОбщиеПараметры, ИмяВызывающейПроцедуры) Экспорт
	
	КонвейерЗаданий = ПостроитьКонвейерЗаданий(Задания, ОбработчикОшибок, СледующийОбработчикЗадания);
	
	Вызвать(КонвейерЗаданий, ОбщиеПараметры, ИмяВызывающейПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура Вызвать(ОбработчикЗадания, ОбщиеПараметры, ИмяВызывающейПроцедуры) Экспорт
	
	КонтекстЗадания = Новый Структура;
	КонтекстЗадания.Вставить("ИмяВызывающейПроцедуры", ИмяВызывающейПроцедуры);
	КонтекстЗадания.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	КонтекстЗадания.Вставить("СледующийОбработчикЗадания", Неопределено);
	
	ВыполнитьОбработкуОповещения(ОбработчикЗадания, КонтекстЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура _ВыполнитьОбработчикЗадания(КонтекстЗадания, ДополнительныеПараметры) Экспорт
	
	Попытка
		
		Если КонтекстЗадания.ИмяВызывающейПроцедуры = Неопределено Тогда
			ТекстИсключения = НСтр(
				"ru = 'нарушение протокола';
				|en = 'violation of protocol'"
			);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли; 
		
		Сообщить(СтрШаблон("Вызывающий(%1) -> Задание(%2)", КонтекстЗадания.ИмяВызывающейПроцедуры, ДополнительныеПараметры.Задание.ИмяПроцедуры));
		
		КонтекстЗадания.СледующийОбработчикЗадания = ДополнительныеПараметры.СледующийОбработчикЗадания;
		
		ФиксированныйКонтекстЗадания = Новый ФиксированнаяСтруктура(КонтекстЗадания);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Задание, ФиксированныйКонтекстЗадания);
		
	Исключение
		
		Если ДополнительныеПараметры.ОбработчикОшибок <> Неопределено Тогда 
		
			КонтекстОшибки = КонтекстОшибки(ИнформацияОбОшибке(), КонтекстЗадания.ОбщиеПараметры);
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикОшибок, КонтекстОшибки);
			
		КонецЕсли; 
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура _ОбработатьОшибку(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	If ДополнительныеПараметры._ОбработчикОшибок <> Неопределено Тогда
		
		КонтекстОшибки = КонтекстОшибки(ИнформацияОбОшибке, ДополнительныеПараметры._ОбщиеПараметры);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры._ОбработчикОшибок, КонтекстОшибки);
			
		СтандартнаяОбработка = Ложь;
	
	EndIf; 
	
КонецПроцедуры 

&НаКлиенте
Функция КонтекстОшибки(ИнформацияОбОшибке, ОбщиеПараметры)
	
	КонтекстОшибки = Новый Структура;
	КонтекстОшибки.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	КонтекстОшибки.Вставить("ОбщиеПараметры", ОбщиеПараметры);
	
	Возврат КонтекстОшибки;
	
КонецФункции

&НаКлиенте
Функция ОбработчикЗадания(Задание, СледующийОбработчикЗадания, ОбработчикОшибок)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Задание", Задание);
	ДополнительныеПараметры.Вставить("СледующийОбработчикЗадания", СледующийОбработчикЗадания);
	ДополнительныеПараметры.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьОбработчикЗадания = Новый ОписаниеОповещения(
		"_ВыполнитьОбработчикЗадания",
		ЭтотОбъект,
		ДополнительныеПараметры
	);
	
	Возврат _ВыполнитьОбработчикЗадания;
	
КонецФункции 

// Создает новый обработчик ошибок
&НаКлиенте
Функция ОбработчикОшибок(ИмяПроцедуры, Модуль) Экспорт
	
	Возврат Новый ОписаниеОповещения(ИмяПроцедуры, Модуль, Новый Структура);
	
КонецФункции 

&НаКлиенте
Функция ПостроитьКонвейерЗаданий(Задания, ОбработчикОшибок, СледующийОбработчикЗадания)
	
	ОбработчикиЗаданий = Новый Массив(Задания.Количество() + 1); // + ОстановитьКонвейер
	
	ИндексЗадания = Задания.Количество();
	
	_ВыполнитьЗаданиеОстановитьКонвейер = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеОстановитьКонвейер",
		ЭтотОбъект,
		СледующийОбработчикЗадания
	);
	
	ОбработчикЗадания = ОбработчикЗадания(_ВыполнитьЗаданиеОстановитьКонвейер, Неопределено, ОбработчикОшибок);
	ОбработчикиЗаданий[ИндексЗадания] = ОбработчикЗадания;
	
	Пока ИндексЗадания > 0 Цикл
		
		ИндексЗадания = ИндексЗадания - 1;
		Задание = Задания[ИндексЗадания];
		ПараметрыЗадания = Задание.ДополнительныеПараметры;
		
		ОбработчикОшибокЗадания = Неопределено;
		Если ПараметрыЗадания.Property("ОбработчикОшибок", ОбработчикОшибокЗадания)
			И ОбработчикОшибокЗадания <> Неопределено Тогда
			ОбработчикОшибокЗадания.ДополнительныеПараметры.Вставить("ОбработчикиЗаданий", ОбработчикиЗаданий);
		КонецЕсли;  
		
		ОбработчикЗадания = ОбработчикЗадания(Задание, ОбработчикЗадания, ОбработчикОшибок);
		ОбработчикиЗаданий[ИндексЗадания] = ОбработчикЗадания;
		
	КонецЦикла; 
		
	ОбработчикОшибок.ДополнительныеПараметры.Вставить("ОбработчикиЗаданий", ОбработчикиЗаданий);
	
	Возврат ОбработчикЗадания;
	
КонецФункции 

#Область ПроизвольныеЭлементыКонвейера

// Произвольное задание. По окончании управление сразу передается на следующий этап в конвейере.
// ИмяПроцедуры - имя процедуры, которая должна быть экспортной, на клиенте, и иметь два параметра: КонтекстЗадания, ДополнительныеПараметры
// Модуль - модуль, в котором находится процедура
// ДополнительныеПараметры - произвольный параметр, который передается этапу в ДополнительныеПараметры
&НаКлиенте
Функция ПроизвольноеЗадание(ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОписаниеЗадания = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	ПараметрыДекоратора = Новый Структура;
	ПараметрыДекоратора.Вставить("ОписаниеЗадания", ОписаниеЗадания);
	
	_ВыполнитьПроизвольноеЗадание = Новый ОписаниеОповещения(
		"_ВыполнитьПроизвольноеЗадание",
		ЭтотОбъект,
		ПараметрыДекоратора
	);	
	
	Возврат _ВыполнитьПроизвольноеЗадание;
	
КонецФункции  

// Произвольный обработчик с одним параметром. По окончании управление сразу передается на следующий этап в конвейере.
// ИмяПроцедуры - имя процедуры, которая должна быть экспортной, на клиенте, и иметь один параметр: ДополнительныеПараметры.
// Модуль - модуль, в котором находится процедура.
// ДополнительныеПараметры - произвольный параметр, который передается обработчику в ДополнительныеПараметры.
&НаКлиенте
Функция ПроизвольныйОбработчик1(ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	Обработчик = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	ПараметрыДекоратора = Новый Структура;
	ПараметрыДекоратора.Вставить("Обработчик", Обработчик);
	
	_ВыполнитьПроизвольныйОбработчик1 = Новый ОписаниеОповещения(
		"_ВыполнитьПроизвольныйОбработчик1",
		ЭтотОбъект,
		ПараметрыДекоратора,
		"_ОбработатьОшибку",
		ЭтотОбъект
	);	
	
	Возврат _ВыполнитьПроизвольныйОбработчик1;
	
КонецФункции

// Произвольный обработчик с двумя параметрами. По окончании управление сразу передается на следующий этап в конвейере.
// ИмяПроцедуры - имя процедуры, которая должна быть экспортной, на клиенте, и иметь два параметра: Результат, ДополнительныеПараметры.
// Модуль - модуль, в котором находится процедура.
// ДополнительныеПараметры - произвольный параметр, который передается обработчику в ДополнительныеПараметры.
&НаКлиенте
Функция ПроизвольныйОбработчик2(ИмяПроцедуры, Модуль, ДополнительныеПараметры = Неопределено) Экспорт
	
	Обработчик = Новый ОписаниеОповещения(
		ИмяПроцедуры,
		Модуль,
		ДополнительныеПараметры
	);
	
	ПараметрыДекоратора = Новый Структура;
	ПараметрыДекоратора.Вставить("Обработчик", Обработчик);
	
	_ВыполнитьПроизвольныйОбработчик2 = Новый ОписаниеОповещения(
		"_ВыполнитьПроизвольныйОбработчик2",
		ЭтотОбъект,
		ПараметрыДекоратора,
		"_ОбработатьОшибку",
		ЭтотОбъект
	);	
	
	Возврат _ВыполнитьПроизвольныйОбработчик2;
	
КонецФункции

#КонецОбласти // ПроизвольныеЭлементыКонвейера

#Область СтандартныеЗадания

&НаКлиенте
Функция ЗаданиеЗапуститьКонвейер(Задания, ОбработчикОшибок = Неопределено) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Задания", Задания);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьЗаданиеЗапуститьКонвейер = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеЗапуститьКонвейер",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеЗапуститьКонвейер;
	
КонецФункции

&НаКлиенте
Функция ЗаданиеПоказатьДиалогВыбораФайла(Обработчик, ДиалогВыбораФайла, ОбработчикОшибок = Неопределено) Экспорт
	
	Если Обработчик = Неопределено Тогда

		ПараметрыДекоратора = Новый Структура;
		ПараметрыДекоратора.Вставить("Обработчик", ОписаниеЗаглушки());

		Обработчик = Новый ОписаниеОповещения(
			"_ВыполнитьПроизвольныйОбработчик2",
			ЭтотОбъект,
			ПараметрыДекоратора
		);	
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьЗаданиеПоказатьДиалогВыбораФайла = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеПоказатьДиалогВыбораФайла",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеПоказатьДиалогВыбораФайла;
	
КонецФункции 

&НаКлиенте
Функция ЗаданиеНачатьСозданиеКаталога(Обработчик, ИмяКаталога, ОбработчикОшибок = Неопределено) Экспорт
	
	Если Обработчик = Неопределено Тогда

		ПараметрыДекоратора = Новый Структура;
		ПараметрыДекоратора.Вставить("Обработчик", ОписаниеЗаглушки());

		Обработчик = Новый ОписаниеОповещения(
			"_ВыполнитьПроизвольныйОбработчик2",
			ЭтотОбъект,
			ПараметрыДекоратора
		);	
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("ИмяКаталога", ИмяКаталога);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьЗаданиеНачатьСозданиеКаталога = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеНачатьСозданиеКаталога",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеНачатьСозданиеКаталога;
	
КонецФункции 

&НаКлиенте
Функция ЗаданиеНачатьУдалениеФайлов(Обработчик, Путь, Маска = Неопределено, ОбработчикОшибок = Неопределено) Экспорт
	
	Если Обработчик = Неопределено Тогда

		ПараметрыДекоратора = Новый Структура;
		ПараметрыДекоратора.Вставить("Обработчик", ОписаниеЗаглушки());

		Обработчик = Новый ОписаниеОповещения(
			"_ВыполнитьПроизвольныйОбработчик1",
			ЭтотОбъект,
			ПараметрыДекоратора
		);	
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Обработчик", Обработчик);
	ПараметрыЗадания.Вставить("Путь", Путь);
	ПараметрыЗадания.Вставить("Маска", Маска);
	ПараметрыЗадания.Вставить("ОбработчикОшибок", ОбработчикОшибок);
	
	_ВыполнитьЗаданиеНачатьУдалениеФайлов = Новый ОписаниеОповещения(
		"_ВыполнитьЗаданиеНачатьУдалениеФайлов",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	Возврат _ВыполнитьЗаданиеНачатьУдалениеФайлов;
	
КонецФункции

#КонецОбласти // СтандартныеЗадания

#Область РеализацияСтандартныхЗаданий

&НаКлиенте
Процедура _ВыполнитьЗаданиеЗапуститьКонвейер(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Пуск(
		ПараметрыЗадания.Задания,
		ПараметрыЗадания.ОбработчикОшибок,
		КонтекстЗадания.СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		КонтекстЗадания.ИмяВызывающейПроцедуры
	);
	
КонецПроцедуры

&НаКлиенте
Процедура _ВыполнитьЗаданиеПоказатьДиалогВыбораФайла(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания);
	
	_ПоказатьДиалогВыбораФайла = Новый ОписаниеОповещения(
		"_ПоказатьДиалогВыбораФайла",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	//НачатьПослеПодключенияРасширенияРаботыСФайлами(_ПоказатьДиалогВыбораФайла);
	
	ВыполнитьОбработкуОповещения(_ПоказатьДиалогВыбораФайла, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура _ВыполнитьЗаданиеНачатьСозданиеКаталога(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания);
		
	_НачатьСозданиеКаталога = Новый ОписаниеОповещения(
		"_НачатьСозданиеКаталога",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	//НачатьПослеПодключенияРасширенияРаботыСФайлами(_НачатьСозданиеКаталога);
	
	ВыполнитьОбработкуОповещения(_НачатьСозданиеКаталога, Неопределено);
	
КонецПроцедуры 

&НаКлиенте
Процедура _ВыполнитьЗаданиеНачатьУдалениеФайлов(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания);
		
	_НачатьУдалениеФайлов = Новый ОписаниеОповещения(
		"_НачатьУдалениеФайлов",
		ЭтотОбъект,
		ПараметрыЗадания
	);
	
	//НачатьПослеПодключенияРасширенияРаботыСФайлами(_НачатьУдалениеФайлов);
	
	ВыполнитьОбработкуОповещения(_НачатьУдалениеФайлов, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура _ВыполнитьЗаданиеОстановитьКонвейер(КонтекстЗадания, СледующийОбработчикЗадания) Экспорт
	
	Если КонтекстЗадания.СледующийОбработчикЗадания <> Неопределено Тогда
		ТекстИсключения = НСтр(
			"ru = 'нарушение протокола';
			|en = 'violation of protocol'"
		);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли; 
	
	Вызвать(
		СледующийОбработчикЗадания,
		КонтекстЗадания.ОбщиеПараметры,
		ИмяФормы() + "._ВыполнитьЗаданиеОстановитьКонвейер()"
	);
	
КонецПроцедуры

#КонецОбласти // РеализацияСтандартныхЗаданий

#Область ОбработчикиЗаглушки

// Заглушки, которые используются в стандартных этапах в качестве обработчика если он не указан.

// Обработчик-заглушка с двумя параметрами
&НаКлиенте
Функция ОписаниеЗаглушки()
	
	Возврат Новый ОписаниеОповещения("_ОбработчикЗаглушка", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура _ОбработчикЗаглушка(Result, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти // ОбработчикиЗаглушки

#Область Обертки

// Простые обертки, чтобы иметь возможность делать вызов через ВыполнитьОбработкуОповещения()

&НаКлиенте
Процедура _ПоказатьДиалогВыбораФайла(Ничего, ДополнительныеПараметры) Экспорт
		
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	ДиалогВыбораФайла.Показать(ДополнительныеПараметры.Обработчик);	
	
КонецПроцедуры

&НаКлиенте
Процедура _НачатьУдалениеФайлов(Ничего, ДополнительныеПараметры) Экспорт
		
	НачатьУдалениеФайлов(
		ДополнительныеПараметры.Обработчик,
		ДополнительныеПараметры.Путь,
		ДополнительныеПараметры.Маска
	);	
	
КонецПроцедуры

&НаКлиенте
Процедура _НачатьСозданиеКаталога(Ничего, ДополнительныеПараметры) Экспорт
		
	НачатьСозданиеКаталога(
		ДополнительныеПараметры.Обработчик,
		ДополнительныеПараметры.ИмяКаталога
	);	
	
КонецПроцедуры

#КонецОбласти // Обертки

#Область Декораторы

// Декораторы, которые расширяют логику пользовательских процедур.
// Например, добавляют в конце передачу управления на следующий этап конвейера.

&НаКлиенте
Процедура _ВыполнитьПроизвольноеЗадание(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеЗадания, Контекст);
	
	Вызвать(
		Контекст.СледующийОбработчикЗадания,
		Контекст.ОбщиеПараметры,
		ИмяФормы() + "._ВыполнитьПроизвольноеЗадание()"
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура _ВыполнитьПроизвольныйОбработчик1(ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Обработчик);
	
	Вызвать(
		ДополнительныеПараметры._СледующийОбработчикЗадания,
		ДополнительныеПараметры._ОбщиеПараметры,
		ИмяФормы() + "._ВыполнитьПроизвольныйОбработчик1()"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура _ВыполнитьПроизвольныйОбработчик2(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Обработчик, Результат);
	
	Вызвать(
		ДополнительныеПараметры._СледующийОбработчикЗадания,
		ДополнительныеПараметры._ОбщиеПараметры,
		ИмяФормы() + "._ВыполнитьПроизвольныйОбработчик2()"
	);
	
КонецПроцедуры

#КонецОбласти // Декораторы

#Область СлужебныеМетоды

&НаКлиенте
Процедура ПодготовитьПараметрыОбработчика(КонтекстЗадания, ПараметрыЗадания)
	
	ПараметрыОбработчика = ПараметрыЗадания.Обработчик.ДополнительныеПараметры;
	
	Если ПараметрыОбработчика = Неопределено Тогда
		ТекстИсключения = НСтр(
			"ru = 'нарушение протокола';
			|en = 'violation of protocol'"
		);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	// Для передачи управления на следующее задание в обработчиках нужна дополнительная информация.
	// В заданиях такой проблемы нет, так как им передается контекст, содержащий эту информацию.
	// Например в _ВыполнитьЗаданиеПоказатьДиалогВыбораФайла() будет подготовлена информация для передачи в _ВыполнитьПроизвольныйОбработчик2(). 
	ПараметрыОбработчика.Вставить("_СледующийОбработчикЗадания", КонтекстЗадания.СледующийОбработчикЗадания);
	ПараметрыОбработчика.Вставить("_ОбщиеПараметры", КонтекстЗадания.ОбщиеПараметры);
	
	// При обработке системной ошибки нужно иметь возможность вызвать указанный для задания произвольный обработчик ошибок.
	ПараметрыОбработчика.Вставить("_ОбработчикОшибок", ПараметрыЗадания.ОбработчикОшибок); // см. например ОбработатьОшибку()
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФормы()
	
	Возврат ЭтотОбъект.ИмяФормы;
	
КонецФункции

#КонецОбласти // СлужебныеМетоды

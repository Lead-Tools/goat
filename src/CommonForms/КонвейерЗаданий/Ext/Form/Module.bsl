
// Copyright 2019 Tsukanov Alexander. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

&НаКлиенте
Перем ДанныеОчередногоОбработчикаЗадания;

&НаКлиенте
Перем ИдентификаторыЗаданий;

&НаКлиенте
Функция ОбработчикЗадания(Задание, СледующийОбработчикЗадания, ОбработчикОшибок) Экспорт
	
	ОбработчикЗадания = КонвейерЗаданийСлужебныйКлиент.ОбработчикЗадания(Задание, СледующийОбработчикЗадания, ОбработчикОшибок);
		
	_ВыполнитьОбработчикЗадания = Новый ОписаниеОповещения(
		"_ВыполнитьОбработчикЗадания",
		ЭтотОбъект,
		ОбработчикЗадания.ДополнительныеПараметры
	);
	
	Возврат _ВыполнитьОбработчикЗадания;
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьОтладочныйКонтекстЛинии(Линия) Экспорт
		
	Этапы = ЭтотОбъект.ЭтапыКонвейера.ПолучитьЭлементы();
	Этапы.Очистить();
	
	Корень = Этапы.Добавить();
	Корень.Описание = "Этапы конвейера:";
	Корень.ИдентификаторЗадания = "_";
	Этапы = Корень.ПолучитьЭлементы();
	
	Стек = Новый Массив;
		
	Для Каждого Задание Из Линия.Задания Цикл;
		
		ИмяПроцедуры = Задание.ИмяПроцедуры; 
		
		Если ИмяПроцедуры = "_ВыполнитьОператорЕсли" Тогда
			НовыйЭтап = ДобавитьЭтап(Этапы, Задание);
			Стек.Добавить(Этапы);
			Этапы = НовыйЭтап.ПолучитьЭлементы();	
		ИначеЕсли ИмяПроцедуры = "_ВыполнитьОператорИначеЕсли"
			Или ИмяПроцедуры = "_ВыполнитьОператорИначе" Тогда
			Этапы = ВзятьПоследнееЗначение(Стек);
			НовыйЭтап = ДобавитьЭтап(Этапы, Задание);
			Этапы = НовыйЭтап.ПолучитьЭлементы();
		ИначеЕсли ИмяПроцедуры = "_ВыполнитьОператорКонецЕсли" Тогда
			Этапы = СнятьПоследнееЗначение(Стек);
			НовыйЭтап = ДобавитьЭтап(Этапы, Задание);
		Иначе
			НовыйЭтап = ДобавитьЭтап(Этапы, Задание);
		КонецЕсли; 
				
	КонецЦикла; 
	
	РазвернутьЭтапы();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьЭтапы()
	
	Для Каждого Этап Из ЭтотОбъект.ЭтапыКонвейера.ПолучитьЭлементы() Цикл
		
		Элементы.ЭтапыКонвейера.Развернуть(Этап.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла; 
	
КонецПроцедуры 

&НаКлиенте
Функция ДобавитьЭтап(Этапы, Задание)
	
	НовыйЭтап = Этапы.Добавить();
	НовыйЭтап.Описание = Задание.ИмяПроцедуры;
	НовыйЭтап.ИдентификаторЗадания = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторыЗаданий[Задание] = НовыйЭтап.ИдентификаторЗадания;
	
	Возврат НовыйЭтап; 
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ВзятьПоследнееЗначение(Стек)
		
	Возврат Стек[Стек.ВГраница()];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СнятьПоследнееЗначение(Стек)
	
	ИндексВершиныСтека = Стек.ВГраница();
	Значение = Стек[ИндексВершиныСтека];
	Стек.Удалить(ИндексВершиныСтека);
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Процедура _ВыполнитьОбработчикЗадания(КонтекстЗадания, ПараметрыОбработчикаЗадания) Экспорт
	
	ДанныеОчередногоОбработчикаЗадания.КонтекстЗадания = КонтекстЗадания;
	ДанныеОчередногоОбработчикаЗадания.ПараметрыОбработчикаЗадания = ПараметрыОбработчикаЗадания;
	
	ЭтотОбъект.ИдентификаторТекущегоЗадания = ИдентификаторыЗаданий[ДанныеОчередногоОбработчикаЗадания.ПараметрыОбработчикаЗадания.Задание];
	
	// TODO: вызов для автовыполнения до точки останова
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаШагнуть(Команда)
	
	ЭтотОбъект.ИдентификаторТекущегоЗадания = "";
	
	КонвейерЗаданийСлужебныйКлиент._ВыполнитьОбработчикЗадания(
		ДанныеОчередногоОбработчикаЗадания.КонтекстЗадания,
		ДанныеОчередногоОбработчикаЗадания.ПараметрыОбработчикаЗадания
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьЭтапы();
	
КонецПроцедуры

#Если Клиент Тогда
	
	ДанныеОчередногоОбработчикаЗадания = Новый Структура;
	ДанныеОчередногоОбработчикаЗадания.Вставить("КонтекстЗадания");
	ДанныеОчередногоОбработчикаЗадания.Вставить("ПараметрыОбработчикаЗадания");
	
	ИдентификаторыЗаданий = Новый Соответствие;
	
#КонецЕсли
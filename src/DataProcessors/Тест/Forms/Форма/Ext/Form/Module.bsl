
&НаКлиенте
Процедура ТестСинхронный(Command)
	
	ОчиститьСообщения();
	
	ДиалогВыбораПапки = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораПапки.МножественныйВыбор = Ложь;
	ДиалогВыбораПапки.Заголовок = НСтр("ru = 'Выберите каталог'; en = 'Select the folder'");
	
	Если ДиалогВыбораПапки.Choose() Тогда
		
		ИмяПапки = ДиалогВыбораПапки.Каталог;
				
		Попытка
			
			CreateDirectory(ИмяПапки);
			CreateDirectory(ИмяПапки + "AccessVerification\");
			DeleteFiles(ИмяПапки + "AccessVerification\");
			
			Сообщить("Success");
			
		Исключение
			
			// нет прав скорее всего
			
			Сообщить("Ошибка");
			
			Возврат;
			
		КонецПопытки;
		
		Сообщить("Хвост1");
		
	КонецЕсли;
	
	Сообщить("Хвост2");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестАсинхронный(Команда)
	
	// Структура конвейеров (* два конвейера;
	//                       * второй конвейер запускается на втором этапе первого конвейра;
	//                       * отступом выделен вложенный конвейер (второй);
	//                       * этапы пронумерованы по уровням)
	// --------------------------------------------------------------------------------------
	// 1. Показать диалог выбора каталога
	// 2. Выполнить вложенный конвейер:
	//     2.1 Создать папку
	//     2.2 Создать подпапку (при ошибке переход на этап 2.5)
	//     2.3 Удалить подпапку
	//     2.4 Вывести "Success"
	//     2.5 Вывести "Tail1" (после этого этапа происходит переход на этап 3)
	// 3. Вывести "Tail2"
	
	ОчиститьСообщения();
	
	Конвейер = КонвейерЗаданийКлиент; 
	
	ДиалогВыбораПапки = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораПапки.МножественныйВыбор = Ложь;
	ДиалогВыбораПапки.Заголовок = НСтр("ru = 'Выберите каталог'; en = 'Select the folder'");
	
	// Ящик, который двигается по конвейеру через все этапы (см. КонтекстЗадания.ОбщиеПараметры)
	ОбщиеПараметры = Новый Структура;
	
	// Обработчик ошибок, возникших на конвейере
	ОбработчикОшибок = Конвейер.ОбработчикОшибок("ОбработчикОшибок", ЭтотОбъект);
		
	// Список заданий вложенного конвейера
	ВспомогательнаяЛиния = Конвейер.СоздатьЛинию();
	ОбщиеПараметры.Вставить("ВспомогательнаяЛиния", ВспомогательнаяЛиния);
	
	// Формирование этапов конвейера и запуск (в стиле fluent)
	
	Линия = Конвейер.СоздатьЛинию();
	
	Конвейер
	.ЭтапПоказатьДиалогВыбораФайла(
		Линия,
		КонвейерЗаданийКлиент.ПроизвольныйОбработчик2("ОбработатьВыборПапки", ЭтотОбъект, ОбщиеПараметры),
		ДиалогВыбораПапки
	)
	.ЭтапЗапуститьВспомогательнуюЛинию(
		Линия,
		ВспомогательнаяЛиния,
		ОбработчикОшибок
	)
 	.ЭтапПроизвольноеЗадание(
		Линия,
		"ЗаданиеХвост2",
		ЭтотОбъект,
		Неопределено
	)
 	.Пуск(
		Линия,
		ОбработчикОшибок,
		Неопределено,
		ОбщиеПараметры,
		"Обработка.Тест.Форма.ТестАсинхронный"
	);
	
	// То же самое может быть записано иначе:
	
	#Если НЕ Клиент Тогда
		
	Конвейер.ЭтапПоказатьДиалогВыбораФайла(
		Линия,
		КонвейерЗаданийКлиент.ПроизвольныйОбработчик2("ОбработатьВыборПапки", ЭтотОбъект, ОбщиеПараметры),
		ДиалогВыбораПапки
	);
	
	Конвейер.ЭтапЗапуститьВспомогательнуюЛинию(
		Линия,
		ВспомогательнаяЛиния,
		ОбработчикОшибок
	);
	
	Конвейер.ЭтапПроизвольноеЗадание(
		Линия,
		"ЗаданиеХвост2",
		ЭтотОбъект,
		Неопределено
	);
	
	Конвейер.Пуск(
		Линия,
		ОбработчикОшибок,
		Неопределено,
		ОбщиеПараметры,
		"Обработка.Тест.Форма.ТестАсинхронный"
	);
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПапки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ИмяПапки = Результат[0];
	
	ДополнительныеПараметры.Вставить("ИмяПапки", ИмяПапки);
	
	ВспомогательнаяЛиния = ДополнительныеПараметры.ВспомогательнаяЛиния;
	
	Конвейер = КонвейерЗаданийКлиент;
	
	ОбработчикОшибок = Конвейер.ОбработчикОшибок("ОбработчикОшибок", ЭтотОбъект);
	
	// Формирование этапов конвейера (в обычном стиле)
		
	// 2.1 Стандартный этап для создания каталога
	Конвейер.ЭтапНачатьСозданиеКаталога(ВспомогательнаяЛиния, Неопределено, ИмяПапки);
	
	// 2.2 Стандартный этап для создания каталога
	Конвейер.ЭтапНачатьСозданиеКаталога(ВспомогательнаяЛиния, Неопределено, ИмяПапки + "\AccessVerification\", ОбработчикОшибок);
	
	// 2.3 Стандартный этап для удаления каталога	
	Конвейер.ЭтапНачатьУдалениеФайлов(ВспомогательнаяЛиния, Неопределено, ИмяПапки + "\AccessVerification\", Неопределено);
	
	// 2.4 Произвольное задание	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяПапки", ИмяПапки);
	Конвейер.ЭтапПроизвольноеЗадание(ВспомогательнаяЛиния, "ЗаданиеПриУспехе", ЭтотОбъект, ПараметрыЗадания);
	
	// 2.5 Произвольное задание
	Конвейер.ЭтапПроизвольноеЗадание(ВспомогательнаяЛиния, "ЗаданиеХвост1", ЭтотОбъект, Неопределено)
		
КонецПроцедуры

&AtClient
Процедура ЗаданиеПриУспехе(КонтекстЗадания, ПараметрыЗадания) Экспорт
		
	Сообщить("Успех");
		
КонецПроцедуры

&AtClient
Процедура ЗаданиеХвост1(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Сообщить("Хвост1");
		
КонецПроцедуры

&AtClient
Процедура ЗаданиеХвост2(КонтекстЗадания, ПараметрыЗадания) Экспорт
	
	Сообщить("Хвост2");
		
КонецПроцедуры

&AtClient
Процедура ОбработчикОшибок(КонтекстОшибки, ДополнительныеПараметры) Экспорт
	
	// нет прав скорее всего

	Сообщить(СтрШаблон("Ошибка: Текст = ""%1""; ИмяПапки = ""%2""", КраткоеПредставлениеОшибки(КонтекстОшибки.ИнформацияОбОшибке), КонтекстОшибки.ОбщиеПараметры.ИмяПапки));
	
	// TODO: может добавить этапы "Попытка" и "Исключение"?
	
	//// Передача управления на предпоследний этап
	//СледующийОбработчикЗадания = ДополнительныеПараметры.ОбработчикиЗаданий[ДополнительныеПараметры.ОбработчикиЗаданий.ВГраница() - 1];
	//PipelineNotifyProcessingClient.Invoke(СледующийОбработчикЗадания, "DataProcessor.Test.Form.ОбработчикОшибок", КонтекстОшибки.ОбщиеПараметры);
	
КонецПроцедуры
